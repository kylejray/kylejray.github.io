<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-23T15:43:20-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Kyle J Ray</title><subtitle>Website for testing jekyll and hosting on github pages.</subtitle><entry><title type="html">gh-pages workflow</title><link href="http://localhost:4000/blog/testing/2022/02/23/gh-pages_workflow.html" rel="alternate" type="text/html" title="gh-pages workflow" /><published>2022-02-23T03:40:00-08:00</published><updated>2022-02-23T03:40:00-08:00</updated><id>http://localhost:4000/blog/testing/2022/02/23/gh-pages_workflow</id><content type="html" xml:base="http://localhost:4000/blog/testing/2022/02/23/gh-pages_workflow.html"><![CDATA[<h3 id="attempting-to-document-the-workflow-for-using-a-separate-branch-to-track-website-progress">Attempting to document the workflow for using a separate branch to track website progress</h3>

<ol>
  <li>
    <p>Start with an extablished repositroy you want to build a website for. Build a website locally (this is the hard part), in a subdirectory of the established repository; you do not want this to be tracked by the main repo, so adding it in .gitignore is probably wise.</p>
  </li>
  <li>
    <p>Navigate to the folder where you built the website, and do a git init</p>
  </li>
  <li>
    <p>git add everything in the _site/ directory and do a commit</p>
  </li>
  <li>
    <p>Now, run the following command git subtree push –prefix _site/ origin gh-pages</p>
  </li>
  <li>
    <p>The hope is that the command above will create a new branch called gh-pages on the existing repository.</p>
  </li>
  <li>
    <p>Go to the repo settings and under ‘pages’ tell is to use the root directory of the branch gh-pages as the source</p>
  </li>
  <li>
    <p>Whenever you edit the site and want to publish a new version, repeat steps 3 and 4</p>
  </li>
</ol>

<p>One issue with this method, is that you havent done version control on the actual directory you use to create the website– but the generated site files themselves. Perhaps it is better to push the entire direcotry where you built the website and then tell github to use _site/ as the directory.</p>]]></content><author><name></name></author><category term="blog" /><category term="testing" /><summary type="html"><![CDATA[Attempting to document the workflow for using a separate branch to track website progress]]></summary></entry><entry><title type="html">first post</title><link href="http://localhost:4000/blog/testing/2022/02/23/first-post-copy.html" rel="alternate" type="text/html" title="first post" /><published>2022-02-23T00:00:00-08:00</published><updated>2022-02-23T00:00:00-08:00</updated><id>http://localhost:4000/blog/testing/2022/02/23/first-post%20copy</id><content type="html" xml:base="http://localhost:4000/blog/testing/2022/02/23/first-post-copy.html"><![CDATA[<p>Here I am, writinig a blog a post.</p>

<ul>
  <li>Hope it works
    <ul>
      <li>but we shall see
        <ul>
          <li>if it does</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="blog" /><category term="testing" /><summary type="html"><![CDATA[Here I am, writinig a blog a post.]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2022/02/17/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-02-17T12:45:02-08:00</published><updated>2022-02-17T12:45:02-08:00</updated><id>http://localhost:4000/jekyll/update/2022/02/17/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/02/17/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MARKUP Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts "Hi, #{name}" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.]]></summary></entry></feed>